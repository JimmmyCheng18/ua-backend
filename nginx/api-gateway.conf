# API Gateway Configuration for UA Card Battle Game

# Upstream service definitions
upstream card-service {
    server card-service:8001;
}

upstream user-service {
    server user-service:8002;
}

upstream matchmaking-service {
    server matchmaking-service:8003;
}

upstream game-battle-service {
    server game-battle-service:8004;
}

upstream game-result-service {
    server game-result-service:8005;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=game_limit:10m rate=20r/s;

# Main server block
server {
    listen 80;
    server_name localhost;

    # Global settings
    client_max_body_size 1M;
    proxy_connect_timeout 10s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    proxy_buffers 16 4k;
    proxy_buffer_size 2k;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CORS headers for browser clients
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type 'text/plain; charset=utf-8';
        add_header Content-Length 0;
        return 204;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"api-gateway"}';
        add_header Content-Type application/json;
    }

    # Card Service routes
    location /api/v1/cards {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://card-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # User Service routes
    location ~ ^/api/v1/(auth|users|profiles|decks|collections) {
        limit_req zone=auth_limit burst=10 nodelay;
        
        proxy_pass http://user-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # Matchmaking Service routes
    location /api/v1/matchmaking {
        limit_req zone=api_limit burst=15 nodelay;
        
        proxy_pass http://matchmaking-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # Game Battle Service routes
    location ~ ^/api/v1/(games|battles) {
        limit_req zone=game_limit burst=30 nodelay;
        
        proxy_pass http://game-battle-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
    }

    # WebSocket endpoint for real-time game updates
    location /ws {
        proxy_pass http://game-battle-service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Game Result Service routes
    location ~ ^/api/v1/(results|leaderboard|analytics) {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://game-result-service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # Swagger documentation endpoints
    location ~ ^/swagger/(.*)/(.*) {
        set $service $1;
        set $path $2;
        
        # Route to appropriate service swagger endpoint
        if ($service = "cards") {
            proxy_pass http://card-service/swagger/$path;
        }
        if ($service = "users") {
            proxy_pass http://user-service/swagger/$path;
        }
        if ($service = "matchmaking") {
            proxy_pass http://matchmaking-service/swagger/$path;
        }
        if ($service = "games") {
            proxy_pass http://game-battle-service/swagger/$path;
        }
        if ($service = "results") {
            proxy_pass http://game-result-service/swagger/$path;
        }
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static files (if serving web client)
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri $uri/ =404;
    }

    # Default route - return API information
    location / {
        return 200 '{
            "name": "UA Card Battle Game API",
            "version": "1.0.0",
            "services": {
                "cards": "http://localhost/api/v1/cards",
                "users": "http://localhost/api/v1/users",
                "auth": "http://localhost/api/v1/auth",
                "matchmaking": "http://localhost/api/v1/matchmaking",
                "games": "http://localhost/api/v1/games",
                "results": "http://localhost/api/v1/results"
            },
            "documentation": {
                "cards": "http://localhost/swagger/cards/index.html",
                "users": "http://localhost/swagger/users/index.html",
                "matchmaking": "http://localhost/swagger/matchmaking/index.html",
                "games": "http://localhost/swagger/games/index.html",
                "results": "http://localhost/swagger/results/index.html"
            },
            "monitoring": {
                "prometheus": "http://localhost:9090",
                "grafana": "http://localhost:3000",
                "redis": "http://localhost:8081"
            }
        }';
        add_header Content-Type application/json;
    }

    # Custom error pages
    error_page 404 /404.json;
    location = /404.json {
        return 404 '{"error":"Not Found","message":"The requested endpoint does not exist"}';
        add_header Content-Type application/json;
    }

    error_page 500 502 503 504 /50x.json;
    location = /50x.json {
        return 500 '{"error":"Internal Server Error","message":"Something went wrong on our end"}';
        add_header Content-Type application/json;
    }

    error_page 429 /429.json;
    location = /429.json {
        return 429 '{"error":"Too Many Requests","message":"Rate limit exceeded"}';
        add_header Content-Type application/json;
    }
}

# HTTPS server (for production)
server {
    listen 443 ssl http2;
    server_name localhost;

    # SSL configuration (use real certificates in production)
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Redirect all HTTP to HTTPS in production
    # Uncomment the following for production use:
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }

    # Include the same location blocks as HTTP server
    include /etc/nginx/conf.d/default.conf;
}